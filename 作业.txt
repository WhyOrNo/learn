一、
	1：mybatis动态SQL可以让我们使用XML操作SQL的时候更灵活一些，可以进行一些逻辑判断以及帮助我们进行SQL的拼接，还可进行SQL的循环遍历；
	2：有九种动态SQL：<if/>、<choose/>、<when/>、<otherwise/>、<trim/>、<when/>、<set/>、<foreach/>、<bind/>；
	3：mybatis动态SQL是基于OGNL表达式，从 SQL 参数对象中计算表达式的值,根据表达式的值动态拼接 SQL，以此来完成动态SQL的功能；

二、
	1: 支持，通常使用在一对多、多对多的查询关系中；
	2：原理为通过反射生成代理对象，之后通过拦截器当SQL查询结果为空时，会调用关联查询将数据set进对象中；

三、
	1：三种，SimpleExecutor、ReuseExecutor、BatchExecutor；
	2：SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
	  ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完			     后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用  			     Statement对象。
        BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（				     addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个  				     Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相			     同。

四、
	1： 一级缓存>  存储结构为 HashMap， 范围 SQLSession，         失效场景 当增删改commit之后失效；
	    二级缓存>  存储结构为 HashMap， 范围 mapper，namespace， 失效场景  当增删改commit之后失效；

五、
	1： 在四大对象Executor、ParameterHandler、ResultSetHandler、StatementHandler创建时，会调用interceptChain.pluginAll()方法进行遍历所有的拦截器对原生对象进行处理，之后通过动态代理返回一个代理对象；
	2： 首先继承Interceptor接口；
	    实现intercept、plugin、setProperties方法；
	    在配置文件中<plugins>下的<plugin>标签中进行配置	

 			